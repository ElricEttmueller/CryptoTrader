===== main.py =====
from fastapi.middleware.cors import CORSMiddleware
from fastapi import FastAPI, WebSocket, WebSocketDisconnect
import ccxt.async_support as ccxt_async 
import logging
from urllib.parse import unquote
from datetime import datetime
import logging
import asyncio

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],  # Frontend origin
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

logging.basicConfig(level=logging.INFO)

@app.get("/live-data/{pair:path}")
async def get_live_data(pair: str):
    decoded_pair = unquote(pair)
    logging.info(f"Decoded pair: {decoded_pair}")
    return {"pair_received": decoded_pair}

@app.websocket("/ws/{pair:path}")
async def websocket_endpoint(websocket: WebSocket, pair: str):
    await websocket.accept()
    decoded_pair = unquote(pair)
    formatted_pair = decoded_pair  # No need to replace '-' with '/'
    exchange = ccxt_async.binance()
    # Rest of the code...


    try:
        while True:
            ticker = await exchange.fetch_ticker(formatted_pair)
            await websocket.send_json({
                'timestamp': ticker['timestamp'],
                'last': ticker['last'],
                'bid': ticker['bid'],
                'ask': ticker['ask'],
                'high': ticker['high'],
                'low': ticker['low'],
                'volume': ticker['baseVolume'],
            })
            await asyncio.sleep(1)  # Adjust the interval as needed
    except WebSocketDisconnect:
        logging.info("WebSocket disconnected")
    except Exception as e:
        logging.error(f"Error in WebSocket: {e}")
    finally:
        await exchange.close()
        await websocket.close()

@app.get("/markets")
async def get_markets():
    try:
        exchange = ccxt.binance()
        markets = exchange.load_markets()
        available_markets = list(markets.keys())
        logging.info(f"Markets fetched: {available_markets}")  # Log the markets fetched
        return {"available_markets": available_markets}
    except Exception as e:
        logging.error(f"Error loading markets: {e}")
        return {"error": str(e)}


@app.get("/historical-data/{pair:path}")
async def get_historical_data(pair: str, timeframe: str = "1h", start_date: str = None, end_date: str = None):
    decoded_pair = unquote(pair)
    formatted_pair = decoded_pair.replace('/', '')  # Convert 'BTC/USDT' to 'BTCUSDT'
    
    exchange = ccxt.binance()
    since = exchange.parse8601(start_date) if start_date else None
    until = exchange.parse8601(end_date) if end_date else None

    logging.info(f"Fetching historical data for pair: {formatted_pair}, timeframe: {timeframe}, since: {start_date}, until: {end_date}")

    try:
        ohlcv = exchange.fetch_ohlcv(
            symbol=formatted_pair,
            timeframe=timeframe,
            since=since,
            limit=1000
        )
        logging.info(f"Data fetched for pair {formatted_pair}: {ohlcv}")
        return {"pair": formatted_pair, "data": ohlcv}
    except Exception as e:
        logging.error(f"Error fetching historical data: {e}")
        return {"error": str(e)}


===== App.js =====
import React from 'react';
import Markets from './components/Markets';
import Dashboard from './components/Dashboard';  // Assuming Dashboard has the chart component

// App.js
function App() {
    return (
        <div>
            <h1>Crypto Trading Platform</h1>
            <Markets />
            <Dashboard />
        </div>
    );
}


export default App;


===== index.js =====
import React from 'react';
import { createRoot } from 'react-dom/client';  // Import createRoot from React 18
import App from './App';

const container = document.getElementById('root');  // Get the root element
const root = createRoot(container);  // Create a React 18 root

root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);


===== apiService.js =====
// src/apiService.js
import axios from 'axios';

const api = axios.create({
    baseURL: 'http://localhost:8000',  // Ensure the base URL is correct
});


export async function fetchMarkets() {
    try {
        const response = await api.get('/markets');
        console.log("Full response from backend /markets:", response);  // Log the full response object
        console.log("Available markets in response:", response.data.available_markets);  // Log specifically the markets data
        return response.data.available_markets || [];  // Ensure the response is an array, or return an empty array
    } catch (error) {
        console.error("Error fetching markets:", error);
        return [];  // Return an empty array in case of an error
    }
}







export const fetchLiveData = async (pair) => {
    try {
        const response = await api.get(`/live-data/${encodeURIComponent(pair)}`);
        return response.data;
    } catch (error) {
        console.error('Error fetching live data:', error);
        return null;
    }
};

// Corrected fetchHistoricalData function in apiService.js
export const fetchHistoricalData = async (pair, timeframe, startDate, endDate) => {
    // Remove the '/' in the pair symbol (e.g., BTC/USDT becomes BTCUSDT)
    const formattedPair = pair.replace('/', '');

    try {
        const response = await api.get(`/historical-data/${encodeURIComponent(formattedPair)}`, {
            params: {
                timeframe,
                start_date: startDate,
                end_date: endDate,
            },
        });
        console.log("Historical data response:", response.data);  // Log the response for debugging
        return response.data;  // Return the data from the backend
    } catch (error) {
        console.error('Error fetching historical data:', error);  // Handle error
        return null;
    }
};





===== Chart.js =====
// src/components/Chart.js
import React from 'react';
import Plot from 'react-plotly.js';

const Chart = ({ data, layout }) => {
    console.log('Chart component received data:', data);
    console.log('Chart component received layout:', layout);

    return (
        <div>
            <Plot
                data={data}
                layout={{ ...layout, autosize: true }}
                style={{ width: '100%', height: '100%' }}
                config={{ responsive: true, scrollZoom: true }}
                useResizeHandler={true}
            />
        </div>
    );
};

export default Chart;


===== Markets.js =====
import React, { useEffect, useState } from 'react';
import { fetchMarkets } from '../apiService';

function Markets() {
    const [markets, setMarkets] = useState([]);  // Original list of markets
    const [filteredMarkets, setFilteredMarkets] = useState([]);  // Filtered and sorted markets
    const [searchQuery, setSearchQuery] = useState('');  // Search query state
    const [sortOrder, setSortOrder] = useState('asc');  // Sorting order
    const [loading, setLoading] = useState(true);  // Loading state
    const [error, setError] = useState(null);  // Error state
    const [visibleCount, setVisibleCount] = useState(10);  // Number of markets to display initially

    // Fetch markets from the API once on component mount
    useEffect(() => {
        const getMarkets = async () => {
            try {
                const data = await fetchMarkets();
                if (data && Array.isArray(data)) {
                    setMarkets(data);
                    setFilteredMarkets(data);  // Initially, show all markets
                    console.log("Markets fetched:", data);
                } else {
                    setError("Invalid markets data format");
                }
            } catch (error) {
                console.error("Error fetching markets:", error);
                setError("Failed to load markets");
            } finally {
                setLoading(false);
            }
        };

        getMarkets();
    }, []);

    // Handle search input change and filter the markets based on the search query
    useEffect(() => {
        const filtered = markets.filter((market) =>
            market.toLowerCase().includes(searchQuery.toLowerCase())
        );
        setFilteredMarkets(filtered);  // Update filtered markets based on search query
        setVisibleCount(10);  // Reset the visible count when searching
    }, [searchQuery, markets]);

    // Sorting logic
    const handleSort = (order) => {
        const sortedMarkets = [...filteredMarkets].sort((a, b) => {
            return order === 'asc' ? a.localeCompare(b) : b.localeCompare(a);
        });
        setSortOrder(order);
        setFilteredMarkets(sortedMarkets);  // Update the filtered markets after sorting
    };

    // Function to load more markets
    const loadMore = () => {
        setVisibleCount((prevCount) => prevCount + 10);  // Show 10 more markets each time
    };

    if (loading) {
        return <p>Loading markets...</p>;
    }

    if (error) {
        return <p>{error}</p>;
    }

    return (
        <div>
            <h2>Available Markets</h2>

            {/* Search bar */}
            <input
                type="text"
                placeholder="Search markets..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}  // Update search query
                style={{ marginBottom: '20px', padding: '10px', width: '100%' }}
            />

            {/* Sorting buttons */}
            <div>
                <button onClick={() => handleSort('asc')}>Sort A-Z</button>
                <button onClick={() => handleSort('desc')}>Sort Z-A</button>
            </div>

            {/* Display limited filtered markets */}
            <ul>
                {filteredMarkets.slice(0, visibleCount).map((market, index) => (
                    <li key={index}>{market}</li>
                ))}
            </ul>

            {/* Show Load More button if there are more markets to display */}
            {visibleCount < filteredMarkets.length && (
                <button onClick={loadMore} style={{ marginTop: '20px' }}>
                    Load More
                </button>
            )}
        </div>
    );
}

export default Markets;


===== Header.js =====


===== LiveData.js =====


===== MarketList.js =====
// src/components/MarketList.js
import React, { useEffect, useState } from 'react';
import { fetchMarkets } from '../apiService';

const MarketList = () => {
    const [markets, setMarkets] = useState([]);

    useEffect(() => {
        const getMarkets = async () => {
            const data = await fetchMarkets();
            setMarkets(data);
        };
        getMarkets();
    }, []);

    return (
        <div>
            <h2>Available Markets</h2>
            <ul>
                {markets.map((market, index) => (
                    <li key={index}>{market}</li>
                ))}
            </ul>
        </div>
    );
};

export default MarketList;


===== MarketSelector.js =====
// src/components/MarketSelector.js
import React, { useState, useEffect } from 'react';
import { fetchMarkets } from '../apiService';

const MarketSelector = ({ onMarketSelect }) => {
    const [markets, setMarkets] = useState([]);
    const [selectedMarket, setSelectedMarket] = useState('BTC/USDT');

    useEffect(() => {
        const getMarkets = async () => {
            const availableMarkets = await fetchMarkets();
            setMarkets(availableMarkets);
        };
        getMarkets();
    }, []);

    const handleChange = (e) => {
        const market = e.target.value;
        setSelectedMarket(market);
        if (onMarketSelect) {
            onMarketSelect(market);
        }
    };

    return (
        <div>
            <h3>Select a Market</h3>
            <select value={selectedMarket} onChange={handleChange}>
                {markets.map((market, index) => (
                    <option key={index} value={market}>
                        {market}
                    </option>
                ))}
            </select>
        </div>
    );
};

export default MarketSelector;


===== SettingsPanel.js =====


